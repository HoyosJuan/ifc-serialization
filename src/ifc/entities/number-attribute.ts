// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { IfcDataType } from '../../ifc/entities/ifc-data-type.js';
import { ValueType } from '../../ifc/entities/value-type.js';


export class NumberAttribute {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NumberAttribute {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNumberAttribute(bb:flatbuffers.ByteBuffer, obj?:NumberAttribute):NumberAttribute {
  return (obj || new NumberAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNumberAttribute(bb:flatbuffers.ByteBuffer, obj?:NumberAttribute):NumberAttribute {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NumberAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

type():ValueType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ValueType.UNKNOWN;
}

name():IfcDataType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : IfcDataType.IFCLABEL;
}

static startNumberAttribute(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat32(0, value, 0.0);
}

static addType(builder:flatbuffers.Builder, type:ValueType) {
  builder.addFieldInt8(1, type, ValueType.UNKNOWN);
}

static addName(builder:flatbuffers.Builder, name:IfcDataType) {
  builder.addFieldInt8(2, name, IfcDataType.IFCLABEL);
}

static endNumberAttribute(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNumberAttribute(builder:flatbuffers.Builder, value:number, type:ValueType, name:IfcDataType):flatbuffers.Offset {
  NumberAttribute.startNumberAttribute(builder);
  NumberAttribute.addValue(builder, value);
  NumberAttribute.addType(builder, type);
  NumberAttribute.addName(builder, name);
  return NumberAttribute.endNumberAttribute(builder);
}
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TypeAttribute {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TypeAttribute {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTypeAttribute(bb:flatbuffers.ByteBuffer, obj?:TypeAttribute):TypeAttribute {
  return (obj || new TypeAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTypeAttribute(bb:flatbuffers.ByteBuffer, obj?:TypeAttribute):TypeAttribute {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TypeAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startTypeAttribute(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt32(0, value, 0);
}

static endTypeAttribute(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTypeAttribute(builder:flatbuffers.Builder, value:number):flatbuffers.Offset {
  TypeAttribute.startTypeAttribute(builder);
  TypeAttribute.addValue(builder, value);
  return TypeAttribute.endTypeAttribute(builder);
}
}

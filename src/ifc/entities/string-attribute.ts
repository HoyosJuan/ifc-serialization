// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { IfcDataType } from '../../ifc/entities/ifc-data-type.js';
import { ValueType } from '../../ifc/entities/value-type.js';


export class StringAttribute {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StringAttribute {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStringAttribute(bb:flatbuffers.ByteBuffer, obj?:StringAttribute):StringAttribute {
  return (obj || new StringAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStringAttribute(bb:flatbuffers.ByteBuffer, obj?:StringAttribute):StringAttribute {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StringAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():string|null
value(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
value(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():ValueType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ValueType.UNKNOWN;
}

name():IfcDataType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : IfcDataType.IFCLABEL;
}

static startStringAttribute(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valueOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:ValueType) {
  builder.addFieldInt8(1, type, ValueType.UNKNOWN);
}

static addName(builder:flatbuffers.Builder, name:IfcDataType) {
  builder.addFieldInt8(2, name, IfcDataType.IFCLABEL);
}

static endStringAttribute(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStringAttribute(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset, type:ValueType, name:IfcDataType):flatbuffers.Offset {
  StringAttribute.startStringAttribute(builder);
  StringAttribute.addValue(builder, valueOffset);
  StringAttribute.addType(builder, type);
  StringAttribute.addName(builder, name);
  return StringAttribute.endStringAttribute(builder);
}
}

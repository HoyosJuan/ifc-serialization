// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Identifier {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Identifier {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIdentifier(bb:flatbuffers.ByteBuffer, obj?:Identifier):Identifier {
  return (obj || new Identifier()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIdentifier(bb:flatbuffers.ByteBuffer, obj?:Identifier):Identifier {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Identifier()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

expressId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

guid():string|null
guid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
guid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startIdentifier(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addExpressId(builder:flatbuffers.Builder, expressId:number) {
  builder.addFieldInt32(0, expressId, 0);
}

static addGuid(builder:flatbuffers.Builder, guidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, guidOffset, 0);
}

static endIdentifier(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIdentifier(builder:flatbuffers.Builder, expressId:number, guidOffset:flatbuffers.Offset):flatbuffers.Offset {
  Identifier.startIdentifier(builder);
  Identifier.addExpressId(builder, expressId);
  Identifier.addGuid(builder, guidOffset);
  return Identifier.endIdentifier(builder);
}
}

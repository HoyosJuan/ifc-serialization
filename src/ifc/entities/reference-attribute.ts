// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ValueType } from '../../ifc/entities/value-type.js';


export class ReferenceAttribute {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReferenceAttribute {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReferenceAttribute(bb:flatbuffers.ByteBuffer, obj?:ReferenceAttribute):ReferenceAttribute {
  return (obj || new ReferenceAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReferenceAttribute(bb:flatbuffers.ByteBuffer, obj?:ReferenceAttribute):ReferenceAttribute {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReferenceAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

type():ValueType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ValueType.UNKNOWN;
}

static startReferenceAttribute(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt32(0, value, 0);
}

static addType(builder:flatbuffers.Builder, type:ValueType) {
  builder.addFieldInt8(1, type, ValueType.UNKNOWN);
}

static endReferenceAttribute(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReferenceAttribute(builder:flatbuffers.Builder, value:number, type:ValueType):flatbuffers.Offset {
  ReferenceAttribute.startReferenceAttribute(builder);
  ReferenceAttribute.addValue(builder, value);
  ReferenceAttribute.addType(builder, type);
  return ReferenceAttribute.endReferenceAttribute(builder);
}
}

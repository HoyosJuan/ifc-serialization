// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class AttributeValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AttributeValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAttributeValue(bb:flatbuffers.ByteBuffer, obj?:AttributeValue):AttributeValue {
  return (obj || new AttributeValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAttributeValue(bb:flatbuffers.ByteBuffer, obj?:AttributeValue):AttributeValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AttributeValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dataName():string|null
dataName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stringValue():string|null
stringValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stringValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

intValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

floatValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startAttributeValue(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addType(builder:flatbuffers.Builder, type:number) {
  builder.addFieldInt32(0, type, 0);
}

static addDataName(builder:flatbuffers.Builder, dataNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataNameOffset, 0);
}

static addStringValue(builder:flatbuffers.Builder, stringValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stringValueOffset, 0);
}

static addIntValue(builder:flatbuffers.Builder, intValue:number) {
  builder.addFieldInt32(3, intValue, 0);
}

static addFloatValue(builder:flatbuffers.Builder, floatValue:number) {
  builder.addFieldFloat32(4, floatValue, 0.0);
}

static endAttributeValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAttributeValue(builder:flatbuffers.Builder, type:number, dataNameOffset:flatbuffers.Offset, stringValueOffset:flatbuffers.Offset, intValue:number, floatValue:number):flatbuffers.Offset {
  AttributeValue.startAttributeValue(builder);
  AttributeValue.addType(builder, type);
  AttributeValue.addDataName(builder, dataNameOffset);
  AttributeValue.addStringValue(builder, stringValueOffset);
  AttributeValue.addIntValue(builder, intValue);
  AttributeValue.addFloatValue(builder, floatValue);
  return AttributeValue.endAttributeValue(builder);
}
}

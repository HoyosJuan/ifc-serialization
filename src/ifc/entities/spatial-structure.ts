// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class SpatialStructure {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpatialStructure {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpatialStructure(bb:flatbuffers.ByteBuffer, obj?:SpatialStructure):SpatialStructure {
  return (obj || new SpatialStructure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpatialStructure(bb:flatbuffers.ByteBuffer, obj?:SpatialStructure):SpatialStructure {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpatialStructure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : -1;
}

type():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('-1');
}

children(index: number, obj?:SpatialStructure):SpatialStructure|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new SpatialStructure()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

childrenLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSpatialStructure(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, -1);
}

static addType(builder:flatbuffers.Builder, type:bigint) {
  builder.addFieldInt64(1, type, BigInt('-1'));
}

static addChildren(builder:flatbuffers.Builder, childrenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, childrenOffset, 0);
}

static createChildrenVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChildrenVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSpatialStructure(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSpatialStructure(builder:flatbuffers.Builder, id:number, type:bigint, childrenOffset:flatbuffers.Offset):flatbuffers.Offset {
  SpatialStructure.startSpatialStructure(builder);
  SpatialStructure.addId(builder, id);
  SpatialStructure.addType(builder, type);
  SpatialStructure.addChildren(builder, childrenOffset);
  return SpatialStructure.endSpatialStructure(builder);
}
}
